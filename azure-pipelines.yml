# Starter pipeline    
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- master

pool: myAgentPool

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: 'c9f1e8cb-24a3-405b-9046-bf2b34125d0c'
  
  
  # Web app name
  webAppName: 'flasksklearnbysami'

  # Environment name
  environmentName: 'flask-ml-service'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool: myAgentPool
    steps:
    - script: echo Hello, world!
      displayName: 'Run a one-line script'

    - script: |
        sudo apt-get update
        sudo apt update
        sudo apt install software-properties-common
        sudo add-apt-repository ppa:deadsnakes/ppa
        # Check if the VM has Python installed already. 
        # Otherwise, use these commands to install Python
        sudo apt-get install python3
        sudo apt-get install python3-venv
        sudo apt-get install python3-pip
        python3 --version
        pip --version 
        # Important tools for the Pipeline build steps
        sudo apt-get install python3-distutils
        sudo apt-get -y install zip
        sudo apt-get -y install make
      displayName: 'Run all script for the agentPool'
    
    - script: |
        export PATH=$HOME/.local/bin:$PATH
        make install
      workingDirectory: $(projectRoot)
      displayName: 'myStep 1 - Install dependance'
    
    - task: ArchiveFiles@2
      displayName: 'myStep 4 - Archive files'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'myStep 5 - Upload package'
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: DeployJob
    pool: myAgentPool
    environment: '$(environmentName)'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              source: 'current'
              artifact: 'drop'
              path: '$(Pipeline.Workspace)'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: myserviceconnexion
              appType: webAppLinux
              appName: $(webAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'